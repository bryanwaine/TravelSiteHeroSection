{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/macnwanne/Projects/next/my-app2/app/components/MathVisualizer.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { ParametricGeometry } from \"three/examples/jsm/geometries/ParametricGeometry\";\n\n// Color constants from the palette\nconst COLORS = {\n  darkestPurple: \"#3A0519\",\n  mediumPurple: \"#670D2F\",\n  primaryPink: \"#A53860\",\n  lightPink: \"#EF88AD\",\n  darkBg: \"#111111\",\n  lightText: \"#F9F9F9\",\n};\n\n// Closest Tailwind Color Matches\n/*\n'#A53860' = pink-800 (primaryPink)\n'#EF88AD' = pink-400 (lightPink)\n'#3A0519' = rose-950 (darkestPurple)\n'#670D2F' = pink-950 (mediumPurple)\n'#111111' = neutral-900 (darkBg)\n'#F9F9F9' = stone-500 (lightText)\n*/\n\n// Type definitions\ntype EquationType = \"explicit\" | \"parametric\" | \"differential\";\ntype DomainKeyExplicit = keyof DomainExplicit; // \"xMin\" | \"xMax\" | \"yMin\" | \"yMax\"\ntype DomainKeyParametric = keyof DomainParametric; // \"uMin\" | \"uMax\" | \"vMin\" | \"vMax\"\ntype DomainKey = DomainKeyExplicit | DomainKeyParametric;\n\ninterface Parameter {\n  value: number;\n  min: number;\n  max: number;\n  step: number;\n}\n\ninterface Parameters {\n  [key: string]: Parameter;\n}\n\ninterface DomainExplicit {\n  xMin: number;\n  xMax: number;\n  yMin: number;\n  yMax: number;\n}\n\ninterface DomainParametric {\n  uMin: number;\n  uMax: number;\n  vMin: number;\n  vMax: number;\n}\n\n// Helper function for debouncing\nfunction debounce<T extends (...args: any[]) => void>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: ReturnType<typeof setTimeout> | null = null;\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      func(...args);\n    }, delay);\n  };\n}\n\n// Helper function to parse and compile user-defined equations\n// It's important to note that using 'new Function' can be a security risk if the code is not from a trusted source.\n// For a desktop app where the user is inputting their own equations, this risk is somewhat mitigated.\nconst compileFunction = (\n  argNames: string[],\n  expression: string\n): ((...args: number[]) => number) | null => {\n  try {\n    const wrappedExpression = `\n      with (Math) {\n        try {\n          return ${expression};\n        } catch (e) {\n          console.error('Error in user expression:', e);\n          return NaN;\n        }\n      }\n    `;\n    // Args to the generated function will be: ...argValues, Math object\n    // The 'with(Math)' statement makes Math functions (sin, cos, etc.) directly available.\n    const func = new Function(...argNames, wrappedExpression);\n    return (...argValues: number[]) => {\n      const result = func(...argValues);\n      return typeof result === \"number\" ? result : NaN;\n    };\n  } catch (error) {\n    console.error(\"Equation compilation error:\", error);\n    return null;\n  }\n};\n\nconst MathVisualizerApp: React.FC = () => {\n  const mountRef = useRef<HTMLDivElement>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const controlsRef = useRef<OrbitControls | null>(null);\n  const surfaceRef = useRef<THREE.Mesh | null>(null);\n  const animationFrameIdRef = useRef<number | null>(null);\n\n  const [equationType, setEquationType] = useState<EquationType>(\"explicit\");\n  const [explicitEquation, setExplicitEquation] = useState<string>(\n    \"sin(sqrt(x*x + y*y) + a) / (sqrt(x*x + y*y) + a)\"\n  );\n  const [parametricEquations, setParametricEquations] = useState({\n    x: \"u * cos(v*2*PI + t)\",\n    y: \"u * sin(v*2*PI + t)\",\n    z: \"0.3 * v * sin(a*u*PI) + b * u*u\",\n  });\n  const [parameters, setParameters] = useState<Parameters>({\n    a: { value: 1, min: -5, max: 5, step: 0.01 },\n    b: { value: 0.5, min: -5, max: 5, step: 0.01 },\n    c: { value: 1, min: -5, max: 5, step: 0.01 },\n    t: { value: 0, min: 0, max: Math.PI * 2, step: 0.01 }, // Time parameter for animations\n  });\n  const [domainExplicit, setDomainExplicit] = useState<DomainExplicit>({\n    xMin: -10,\n    xMax: 10,\n    yMin: -10,\n    yMax: 10,\n  });\n  const [domainParametric, setDomainParametric] = useState<DomainParametric>({\n    uMin: 0,\n    uMax: 2,\n    vMin: 0,\n    vMax: 1,\n  });\n  const [segments, setSegments] = useState<number>(60);\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const [showError, setShowError] = useState<boolean>(false);\n  const [diffEqX, setDiffEqX] = useState<string>(\"y\");\n  const [diffEqY, setDiffEqY] = useState<string>(\"-x\");\n\n  const currentParamValues = useMemo(\n    () => ({\n      a: parameters.a.value,\n      b: parameters.b.value,\n      c: parameters.c.value,\n      t: parameters.t.value,\n    }),\n    [parameters]\n  );\n\n  // Debounced function to update the surface\n  const regenerateSurface = useCallback(\n    debounce(() => {\n      if (!sceneRef.current) return;\n      setErrorMessage(null);\n      setShowError(false);\n\n      let geometry: ParametricGeometry | null = null;\n      const { a, b, c, t } = currentParamValues;\n\n      try {\n        if (equationType === \"differential\") {\n          return;\n        }\n        if (equationType === \"explicit\") {\n          const funcZ = compileFunction(\n            [\"x\", \"y\", \"a\", \"b\", \"c\", \"t\"],\n            explicitEquation\n          );\n          if (!funcZ) {\n            setErrorMessage(\"Error compiling Z(x,y) equation.\");\n            setShowError(true);\n            return;\n          }\n\n          const surfaceFunction = (\n            x01: number,\n            y01: number,\n            target: THREE.Vector3\n          ) => {\n            const x =\n              domainExplicit.xMin +\n              x01 * (domainExplicit.xMax - domainExplicit.xMin);\n            const y =\n              domainExplicit.yMin +\n              y01 * (domainExplicit.yMax - domainExplicit.yMin);\n            let z = funcZ(x, y, a, b, c, t);\n            if (!isFinite(z)) z = 0; // Fallback for invalid results\n            target.set(x, y, z);\n          };\n          geometry = new ParametricGeometry(\n            surfaceFunction,\n            segments,\n            segments\n          );\n        } else {\n          // Parametric\n          const funcX = compileFunction(\n            [\"u\", \"v\", \"a\", \"b\", \"c\", \"t\"],\n            parametricEquations.x\n          );\n          const funcY = compileFunction(\n            [\"u\", \"v\", \"a\", \"b\", \"c\", \"t\"],\n            parametricEquations.y\n          );\n          const funcZ = compileFunction(\n            [\"u\", \"v\", \"a\", \"b\", \"c\", \"t\"],\n            parametricEquations.z\n          );\n\n          if (!funcX || !funcY || !funcZ) {\n            setErrorMessage(\n              \"Error compiling one or more parametric equations.\"\n            );\n            setShowError(true);\n            return;\n          }\n\n          const surfaceFunction = (\n            u01: number,\n            v01: number,\n            target: THREE.Vector3\n          ) => {\n            const u =\n              domainParametric.uMin +\n              u01 * (domainParametric.uMax - domainParametric.uMin);\n            const v =\n              domainParametric.vMin +\n              v01 * (domainParametric.vMax - domainParametric.vMin);\n            let x = funcX(u, v, a, b, c, t);\n            let y = funcY(u, v, a, b, c, t);\n            let z = funcZ(u, v, a, b, c, t);\n\n            if (!isFinite(x)) x = 0;\n            if (!isFinite(y)) y = 0;\n            if (!isFinite(z)) z = 0;\n            target.set(u, v, z); // This is for explicit, need to fix for parametric\n            target.set(x, y, z);\n          };\n          geometry = new ParametricGeometry(\n            surfaceFunction,\n            segments,\n            segments\n          );\n        }\n\n        if (geometry) {\n          geometry.computeBoundingBox();\n          const { min, max } = geometry.boundingBox!;\n          const zRange = max.z - min.z;\n\n          const colors: Float32Array = new Float32Array(\n            geometry.attributes.position.count * 3\n          );\n          for (let i = 0; i < geometry.attributes.position.count; i++) {\n            const z = geometry.attributes.position.getZ(i);\n            const normalizedZ = zRange > 0.001 ? (z - min.z) / zRange : 0.5; // Avoid division by zero\n\n            // Color mapping: Blue (low Z) -> Green (mid Z) -> Red (high Z)\n            const color = new THREE.Color();\n            if (normalizedZ < 0.5) {\n              color.setHSL(0.66 - normalizedZ * 2 * 0.33, 0.8, 0.5); // Blue to Green\n            } else {\n              color.setHSL(0.33 - (normalizedZ - 0.5) * 2 * 0.33, 0.8, 0.5); // Green to Red\n            }\n            colors[i * 3] = color.r;\n            colors[i * 3 + 1] = color.g;\n            colors[i * 3 + 2] = color.b;\n          }\n          geometry.setAttribute(\"color\", new THREE.BufferAttribute(colors, 3));\n\n          if (surfaceRef.current) {\n            sceneRef.current.remove(surfaceRef.current);\n            surfaceRef.current.geometry.dispose();\n            (surfaceRef.current.material as THREE.Material).dispose();\n          }\n\n          const material = new THREE.MeshPhongMaterial({\n            side: THREE.DoubleSide,\n            vertexColors: true,\n            shininess: 50,\n          });\n\n          surfaceRef.current = new THREE.Mesh(geometry, material);\n          sceneRef.current.add(surfaceRef.current);\n        }\n      } catch (error) {\n        console.error(\"Error generating surface:\", error);\n        setErrorMessage(\n          `Runtime error in equation: ${\n            error instanceof Error ? error.message : String(error)\n          }`\n        );\n        setShowError(true);\n      }\n    }, 250),\n    [\n      equationType,\n      explicitEquation,\n      parametricEquations,\n      currentParamValues,\n      domainExplicit,\n      domainParametric,\n      segments,\n    ]\n  );\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    sceneRef.current = new THREE.Scene();\n    sceneRef.current.background = new THREE.Color(COLORS.darkBg);\n\n    // Camera setup\n    cameraRef.current = new THREE.PerspectiveCamera(\n      75,\n      mountRef.current.clientWidth / mountRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    cameraRef.current.position.set(5, 5, 5);\n    cameraRef.current.lookAt(0, 0, 0);\n\n    // Renderer setup\n    rendererRef.current = new THREE.WebGLRenderer({\n      antialias: true,\n      preserveDrawingBuffer: true,\n    });\n    rendererRef.current.setSize(\n      mountRef.current.clientWidth,\n      mountRef.current.clientHeight\n    );\n    rendererRef.current.setPixelRatio(window.devicePixelRatio);\n    mountRef.current.appendChild(rendererRef.current.domElement);\n\n    // Lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    sceneRef.current.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 10, 7.5);\n    sceneRef.current.add(directionalLight);\n\n    // Controls\n    controlsRef.current = new OrbitControls(\n      cameraRef.current,\n      rendererRef.current.domElement\n    );\n    controlsRef.current.enableDamping = true;\n    controlsRef.current.dampingFactor = 0.05;\n\n    // Initial surface generation\n    regenerateSurface();\n\n    // Animation loop\n    const animate = () => {\n      animationFrameIdRef.current = requestAnimationFrame(animate);\n      controlsRef.current?.update();\n      rendererRef.current?.render(sceneRef.current!, cameraRef.current!);\n    };\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (mountRef.current && rendererRef.current && cameraRef.current) {\n        const width = mountRef.current.clientWidth;\n        const height = mountRef.current.clientHeight;\n        rendererRef.current.setSize(width, height);\n        cameraRef.current.aspect = width / height;\n        cameraRef.current.updateProjectionMatrix();\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      if (animationFrameIdRef.current)\n        cancelAnimationFrame(animationFrameIdRef.current);\n      if (surfaceRef.current) {\n        surfaceRef.current.geometry.dispose();\n        (surfaceRef.current.material as THREE.Material).dispose();\n      }\n      controlsRef.current?.dispose();\n      rendererRef.current?.dispose();\n      if (mountRef.current && rendererRef.current?.domElement) {\n        mountRef.current.removeChild(rendererRef.current.domElement);\n      }\n    };\n  }, []); // Empty dependency array for one-time setup\n\n  useEffect(() => {\n    regenerateSurface();\n  }, [regenerateSurface]);\n\n  useEffect(() => {\n    if (equationType !== \"differential\") return;\n\n    if (!sceneRef.current) return;\n\n    // Clear previous vector field or surface\n    if (surfaceRef.current) {\n      sceneRef.current.remove(surfaceRef.current);\n      surfaceRef.current.geometry.dispose();\n      (surfaceRef.current.material as THREE.Material).dispose();\n      surfaceRef.current = null;\n    }\n\n    const fX = compileFunction([\"x\", \"y\"], diffEqX);\n    const fY = compileFunction([\"x\", \"y\"], diffEqY);\n    if (!fX || !fY) return;\n\n    const group = new THREE.Group();\n    const spacing = 1;\n    const arrowLength = 0.8;\n\n    for (let x = -10; x <= 10; x += spacing) {\n      for (let y = -10; y <= 10; y += spacing) {\n        const dx = fX(x, y);\n        const dy = fY(x, y);\n        const len = Math.sqrt(dx * dx + dy * dy);\n        if (!isFinite(len) || len === 0) continue;\n\n        const dir = new THREE.Vector3(dx, dy, 0).normalize();\n        const origin = new THREE.Vector3(x, y, 0);\n        const arrow = new THREE.ArrowHelper(dir, origin, arrowLength, 0xffff00);\n        group.add(arrow);\n      }\n    }\n\n    sceneRef.current.add(group);\n\n    return () => {\n      sceneRef.current?.remove(group);\n    };\n  }, [equationType, diffEqX, diffEqY]);\n\n  const handleParameterChange = (paramName: string, value: number) => {\n    setParameters((prev) => ({\n      ...prev,\n      [paramName]: { ...prev[paramName], value },\n    }));\n  };\n\n  const handleDomainChange = (\n    type: \"explicit\" | \"parametric\" | \"differential\",\n    field: string,\n    value: number\n  ) => {\n    if (type === \"explicit\") {\n      setDomainExplicit((prev) => ({ ...prev, [field]: value }));\n    } else {\n      setDomainParametric((prev) => ({ ...prev, [field]: value }));\n    }\n  };\n\n  const exportPNG = () => {\n    if (rendererRef.current) {\n      const dataURL = rendererRef.current.domElement.toDataURL(\"image/png\");\n      const link = document.createElement(\"a\");\n      link.download = \"surface_visualization.png\";\n      link.href = dataURL;\n      link.click();\n    }\n  };\n\n  const exportJSON = () => {\n    const data = {\n      equationType,\n      explicitEquation:\n        equationType === \"explicit\" ? explicitEquation : undefined,\n      parametricEquations:\n        equationType === \"parametric\" ? parametricEquations : undefined,\n      parameters,\n      domainExplicit: equationType === \"explicit\" ? domainExplicit : undefined,\n      domainParametric:\n        equationType === \"parametric\" ? domainParametric : undefined,\n      segments,\n    };\n    const jsonString = JSON.stringify(data, null, 2);\n    const blob = new Blob([jsonString], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.download = \"surface_configuration.json\";\n    link.href = url;\n    link.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const resetCamera = () => {\n    if (cameraRef.current && controlsRef.current) {\n      cameraRef.current.position.set(5, 5, 5);\n      cameraRef.current.lookAt(0, 0, 0);\n      controlsRef.current.target.set(0, 0, 0);\n      controlsRef.current.update();\n    }\n  };\n\n  // Style for glasmorphic effect (Tailwind compatible)\n\n  // Closest Tailwind Color Matches\n  /*\n'#A53860' = pink-800 (primaryPink)\n'#EF88AD' = pink-400 (lightPink)\n'#3A0519' = rose-950 (darkestPurple)\n'#670D2F' = pink-950 (mediumPurple)\n'#111111' = neutral-900 (darkBg)\n'#F9F9F9' = stone-500 (lightText)\n*/\n\n  const glassBackgroundClass = `\n  relative \n  min-h-screen \n  bg-gradient-to-br from-stone-900 via-stone-800 to-stone-900\n  overflow-hidden \n  text-black\n`;\n\n  const glassPanelClass =\n    \"bg-rose-950/40 backdrop-blur-lg shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] rounded-xl p-4\";\n\n  const inputClass =\n    \"bg-pink-950 border border-pink-800 text-white rounded px-2 py-1 w-full focus:ring-2 focus:ring-pink-400 focus:border-transparent outline-none\";\n\n  const buttonClass = `\n  relative\n  text-white font-semibold \n  py-2 px-4 \n  rounded \n  backdrop-blur-md \n  border-none\n  bg-gradient-to-r from-pink-400/30 to-pink-800/30\n  bg-[length:200%_100%]\n  bg-left \n  transition-all duration-300 ease-out \n  hover:bg-right \n  shadow-[0_8px_32px_0_rgba(31,38,135,0.15)]\n  cursor-pointer\n`;\n\n  const labelClass = \"block text-sm font-medium text-pink-400 mb-1\";\n  const sliderClass =\n    \"w-full h-2 bg-stone-500 opacity-40 rounded-lg appearance-none cursor-pointer accent-pink-400\";\n\n  return (\n    <div className=\"relative flex h-screen w-screen bg[#111111] text-[#F9F9F9] font-sans overflow-hidden\" style={{ background: \"#111111\" }}>\n      {/* Controls Panel (Left) */}\n      <div\n        className={`${glassBackgroundClass} w-1/3 max-w-md h-full overflow-y-auto p-6 space-y-6 scrollbar-thin scrollbar-thumb-pink-800 scrollbar-track-rose-950`}\n      >\n        <div className=\"absolute -top-20 -left-20 w-96 h-96 bg-pink-400 rounded-full filter blur-3xl opacity-10 animate-pulse\"></div>\n        <div className=\"absolute top-40 right-10 w-80 h-80 bg-purple-400 rounded-full filter blur-2xl opacity-10 animate-pulse\"></div>\n        <div className=\"absolute bottom-10 left-1/3 w-72 h-72 bg-blue-400 rounded-full filter blur-2xl opacity-10 animate-pulse\"></div>\n\n        <div className={`${glassPanelClass} space-y-4`}>\n          <h2 className=\"text-xl font-bold text-center text-pink-400\">\n            3D Surface Visualizer\n          </h2>\n\n          {/* Equation Type Selector */}\n          <div>\n            <label className={labelClass}>Equation Type</label>\n            <div className=\"flex space-x-4\">\n              {(\n                [\"explicit\", \"parametric\", \"differential\"] as EquationType[]\n              ).map((type) => (\n                <button\n                  key={type}\n                  onClick={() => setEquationType(type)}\n                  className={`${buttonClass} flex-1 ${\n                    equationType === type\n                      ? `bg-pink-400 ring-2 ring-white`\n                      : `bg-pink-800 opacity-70`\n                  }`}\n                >\n                  {type.charAt(0).toUpperCase() + type.slice(1)}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Equation Inputs */}\n          {equationType === \"explicit\" ? (\n            <div>\n              <label htmlFor=\"explicitEq\" className={labelClass}>\n                Z = f(x, y, a, b, c, t)\n              </label>\n              <textarea\n                id=\"explicitEq\"\n                value={explicitEquation}\n                onChange={(e) => setExplicitEquation(e.target.value)}\n                className={`${inputClass} h-20 resize-y font-mono text-sm`}\n                placeholder=\"e.g., sin(x*a) + cos(y*b)\"\n              />\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              <div>\n                <label htmlFor=\"paramX\" className={labelClass}>\n                  X = f(u, v, a, b, c, t)\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"paramX\"\n                  value={parametricEquations.x}\n                  onChange={(e) =>\n                    setParametricEquations((p) => ({ ...p, x: e.target.value }))\n                  }\n                  className={`${inputClass} font-mono text-sm`}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"paramY\" className={labelClass}>\n                  Y = f(u, v, a, b, c, t)\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"paramY\"\n                  value={parametricEquations.y}\n                  onChange={(e) =>\n                    setParametricEquations((p) => ({ ...p, y: e.target.value }))\n                  }\n                  className={`${inputClass} font-mono text-sm`}\n                />\n              </div>\n              <div>\n                <label htmlFor=\"paramZ\" className={labelClass}>\n                  Z = f(u, v, a, b, c, t)\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"paramZ\"\n                  value={parametricEquations.z}\n                  onChange={(e) =>\n                    setParametricEquations((p) => ({ ...p, z: e.target.value }))\n                  }\n                  className={`${inputClass} font-mono text-sm`}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Differential Equation Inputs */}\n          {equationType === \"differential\" && (\n            <div className={`${glassPanelClass} space-y-4`}>\n              <h3 className=\"text-lg font-semibold text-pink-400\">\n                Vector Field\n              </h3>\n              <div>\n                <label className={labelClass}>dx/dt =</label>\n                <input\n                  type=\"text\"\n                  value={diffEqX}\n                  onChange={(e) => setDiffEqX(e.target.value)}\n                  className={inputClass}\n                />\n              </div>\n              <div>\n                <label className={labelClass}>dy/dt =</label>\n                <input\n                  type=\"text\"\n                  value={diffEqY}\n                  onChange={(e) => setDiffEqY(e.target.value)}\n                  className={inputClass}\n                />\n              </div>\n            </div>\n          )}\n\n          <p className=\"text-xs text-pink-400 opacity-80\">\n            Use common Math functions like sin, cos, sqrt, pow, PI, etc.\n            Parameters a, b, c, t are available.\n          </p>\n        </div>\n\n        {/* Parameters Panel */}\n        <div className={`${glassPanelClass} space-y-4`}>\n          <h3 className=\"text-lg font-semibold text-pink-400\">Parameters</h3>\n          {Object.entries(parameters).map(([key, param]) => (\n            <div key={key}>\n              <label\n                htmlFor={`param-${key}`}\n                className={labelClass}\n              >{`${key.toUpperCase()}: ${param.value.toFixed(2)}`}</label>\n              <input\n                type=\"range\"\n                id={`param-${key}`}\n                min={param.min}\n                max={param.max}\n                step={param.step}\n                value={param.value}\n                onChange={(e) =>\n                  handleParameterChange(key, parseFloat(e.target.value))\n                }\n                className={sliderClass}\n              />\n            </div>\n          ))}\n        </div>\n\n        {/* Domain & Segments Panel */}\n        <div className={`${glassPanelClass} space-y-4`}>\n          <h3 className=\"text-lg font-semibold text-pink-400\">\n            Domain & Resolution\n          </h3>\n\n          {(equationType === \"explicit\" ? [\"x\", \"y\"] : [\"u\", \"v\"]).map(\n            (axis) => {\n              const minKey = `${axis}Min` as DomainKey;\n              const maxKey = `${axis}Max` as DomainKey;\n              const isExplicit = equationType === \"explicit\";\n              const domain = isExplicit ? domainExplicit : domainParametric;\n\n              const handleChange = (key: DomainKey, value: number) => {\n                if (\n                  equationType === \"explicit\" ||\n                  equationType === \"parametric\"\n                ) {\n                  handleDomainChange(equationType, key, value);\n                }\n              };\n\n              return (\n                <div key={axis} className=\"space-y-1\">\n                  <label className={labelClass}>\n                    {axis.toUpperCase()} Range:{\" \"}\n                    {(domain as Record<DomainKey, number>)[minKey].toFixed(1)}{\" \"}\n                    to{\" \"}\n                    {(domain as Record<DomainKey, number>)[maxKey].toFixed(1)}\n                  </label>\n                  <div className=\"flex gap-2 items-center\">\n                    <input\n                      type=\"range\"\n                      min={-100}\n                      max={(domain as Record<DomainKey, number>)[maxKey]}\n                      step=\"0.1\"\n                      value={(domain as Record<DomainKey, number>)[minKey]}\n                      onChange={(e) =>\n                        handleChange(minKey, parseFloat(e.target.value))\n                      }\n                      className={sliderClass + \" flex-1\"}\n                    />\n                    <input\n                      type=\"range\"\n                      min={(domain as Record<DomainKey, number>)[minKey]}\n                      max={100}\n                      step=\"0.1\"\n                      value={(domain as Record<DomainKey, number>)[maxKey]}\n                      onChange={(e) =>\n                        handleChange(maxKey, parseFloat(e.target.value))\n                      }\n                      className={sliderClass + \" flex-1\"}\n                    />\n                  </div>\n                </div>\n              );\n            }\n          )}\n\n          <div>\n            <label htmlFor=\"segments\" className={labelClass}>\n              Segments: {segments}\n            </label>\n            <input\n              type=\"range\"\n              id=\"segments\"\n              min=\"10\"\n              max=\"200\"\n              step=\"1\"\n              value={segments}\n              onChange={(e) => setSegments(parseInt(e.target.value))}\n              className={sliderClass}\n            />\n          </div>\n        </div>\n\n        {/* Actions Panel */}\n        <div className={`${glassPanelClass} space-y-3`}>\n          <h3 className=\"text-lg font-semibold text-pink-400\">Actions</h3>\n          <button onClick={resetCamera} className={`${buttonClass} w-full`}>\n            Reset Camera\n          </button>\n          <button onClick={exportPNG} className={`${buttonClass} w-full`}>\n            Export as PNG\n          </button>\n          <button onClick={exportJSON} className={`${buttonClass} w-full`}>\n            Export as JSON\n          </button>\n        </div>\n        {/* Error Display */}\n        {showError && errorMessage && (\n          <div className=\"fixed bottom-4 right-4 bg-red-500 text-white p-4 rounded-lg shadow-lg max-w-sm z-50\">\n            <div className=\"flex justify-between items-center\">\n              <h4 className=\"font-bold\">Error</h4>\n              <button\n                onClick={() => setShowError(false)}\n                className=\"text-xl font-bold\"\n              >\n                &times;\n              </button>\n            </div>\n            <p className=\"mt-2 text-sm\">{errorMessage}</p>\n          </div>\n        )}\n      </div>\n\n      {/* Canvas View (Right) */}\n      <div\n        ref={mountRef}\n        className=\"w-2/3 h-full relative outline-none\"\n        tabIndex={0}\n      >\n        {/* Canvas will be mounted here by Three.js */}\n      <div\n        className={`${glassPanelClass} absolute bottom-4 right-4 text-sm flex flex-col items-start justify-center gap-2 z-50 shadow-none`}\n      >\n        <p>Scroll to zoom in/out</p>\n        <p>Left-click and drag to pan</p>\n        <p>Right-click and drag to move</p>\n      </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MathVisualizerApp;\n\n// To make this runnable in a typical React project:\n// 1. Ensure you have `react`, `react-dom`, `three`, `@types/three` installed.\n// 2. Set up Tailwind CSS in your project. The classes used here depend on that setup.\n//    Make sure your `tailwind.config.js` content array includes this file's path.\n//    The custom colors and rgba values should be compatible with Tailwind JIT mode.\n//    For scrollbar styling, you might need a plugin like `tailwind-scrollbar`.\n// 3. Import and render MathVisualizerApp in your main application file (e.g., App.tsx or index.tsx).\n//    Example:\n//    import ReactDOM from 'react-dom/client';\n//    import MathVisualizerApp from './MathVisualizerApp'; // Adjust path as needed\n//    import './index.css'; // Your main CSS file with Tailwind directives\n//\n//    ReactDOM.createRoot(document.getElementById('root')!).render(\n//      <React.StrictMode>\n//        <MathVisualizerApp />\n//      </React.StrictMode>\n//    );\n"],"names":[],"mappings":"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","debugId":null}}]
}